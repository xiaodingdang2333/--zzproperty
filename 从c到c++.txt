引用：
1、定义引用时必须初始化成变量
2、初始化之后，不能再引用其他变量
3、只能引用变量，不能引用常量和表达式
4、不能通过常引用去修改其引用的内容
eg：int n = 100;
       const int & r = n;
       r = 200; //编译错
       n = 300; // 没问题

const：
1、c++的const相比于c的define的优点在于const有类型 便于类型检查
2、常量指针不能赋值给非常量指针（除非强制类型转换），反过来可以，因为常量指针指向的地方不能改，赋值给非常量指针之后可以通过非常量指针将其更改，这样不安全。
3、不能通过常量指针、常引用去更改其指向、引用的值

动态内存分配：
删除数组时加【】
eg：int * p = new int[20];
        p[0] = 1;
        delete [ ] p;

内联函数 函数重载 函数缺省参数
 函数调用是有时间开销的。如果函数本身只有几条语
句，执行非常快，而且函数被反复执行很多次，相比
之下调用函数所产生的这个开销就会显得比较大。
 为了减少函数调用的开销，引入了内联函数机制。编
译器处理对内联函数的调用语句时，是将整个函数的
代码插入到调用语句处，而不会产生调用函数的语句。

    函数重载：名字相同、参数个数或类型不同
    缺省：c++允许让最右边连续的若干个参数缺省
目的是为了提高程序的可扩充性，比如一个只能画黑圆的程序后期需要可以画彩色，这时需要加上
颜色这个参数，以前调用画圆的函数如果没有缺省值，就都需要修改，这时只需要给一个默认的黑色作为缺省值，那些只需要画黑色的函数则不需要修改了。

结构化程序的缺点：在规模庞大的时候，难以理解、难以扩充、难以查错、难以重用。
面向对象程序的特点：抽象 封装 继承 多态

和结构变量一样，对象所占用的内存空间等于所有成员变量大小之和，不包括成员函数，一个类的成员函数在内存中只占一份空间，被所有对象共享。

使用类的成员函数：对象名.成员名
                               指针->成员名
	               引用名.成员名